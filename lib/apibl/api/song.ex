# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.Song do
  @moduledoc """
  API calls for all endpoints tagged `Song`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APIBL.Model.Song.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec song_get_hash(Tesla.Env.client, String.t, keyword()) :: {:ok, APIBL.Model.Song.t} | {:error, Tesla.Env.t}
  def song_get_hash(connection, hash, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/map/hash/#{hash}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.Song}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DiffModResponse{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec song_get_mod_song_infos(Tesla.Env.client, String.t, keyword()) :: {:ok, list(APIBL.Model.DiffModResponse.t)} | {:error, Tesla.Env.t}
  def song_get_mod_song_infos(connection, hash, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/map/modinterface/#{hash}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.DiffModResponse}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:baseSongId` (String.t): 
    - `:oldSongId` (String.t): 
    - `:newSongId` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec song_migrate_nominations(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def song_migrate_nominations(connection, opts \\ []) do
    optional_params = %{
      :baseSongId => :query,
      :oldSongId => :query,
      :newSongId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/map/migratenominations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec song_refreshstatus(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def song_refreshstatus(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/refreshstatus")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:oldId` (String.t): 
    - `:newId` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec song_wefwefwefwef(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def song_wefwefwefwef(connection, opts \\ []) do
    optional_params = %{
      :oldId => :query,
      :newId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/wefwefwefwef")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
