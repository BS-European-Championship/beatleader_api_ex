# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.Preview do
  @moduledoc """
  API calls for all endpoints tagged `Preview`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:playerID` (String.t): 
    - `:id` (String.t): 
    - `:difficulty` (String.t): 
    - `:mode` (String.t): 
    - `:link` (String.t): 
    - `:scoreId` (integer()): 
    - `:twitter` (boolean()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec preview_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def preview_get(connection, opts \\ []) do
    optional_params = %{
      :playerID => :query,
      :id => :query,
      :difficulty => :query,
      :mode => :query,
      :link => :query,
      :scoreId => :query,
      :twitter => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/preview/replay")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:players` (String.t): 
    - `:hash` (String.t): 
    - `:difficulty` (String.t): 
    - `:mode` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec preview_get_royale(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def preview_get_royale(connection, opts \\ []) do
    optional_params = %{
      :players => :query,
      :hash => :query,
      :difficulty => :query,
      :mode => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/preview/royale")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
