# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.PlayerContextScores do
  @moduledoc """
  API calls for all endpoints tagged `PlayerContextScores`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:showRatings` (boolean()): 
    - `:currentID` (String.t): 
    - `:sortBy` (String.t): 
    - `:order` (Order): 
    - `:page` (integer()): 
    - `:count` (integer()): 
    - `:search` (String.t): 
    - `:diff` (String.t): 
    - `:mode` (String.t): 
    - `:requirements` (Requirements): 
    - `:scoreStatus` (ScoreFilterStatus): 
    - `:leaderboardContext` (LeaderboardContexts): 
    - `:type` (String.t): 
    - `:modifiers` (String.t): 
    - `:stars_from` (float()): 
    - `:stars_to` (float()): 
    - `:time_from` (integer()): 
    - `:time_to` (integer()): 
    - `:eventId` (integer()): 

  ### Returns

  - `{:ok, APIBL.Model.ScoreResponseWithMyScoreResponseWithMetadata.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec player_context_scores_get_scores(Tesla.Env.client, String.t, keyword()) :: {:ok, APIBL.Model.ScoreResponseWithMyScoreResponseWithMetadata.t} | {:error, Tesla.Env.t}
  def player_context_scores_get_scores(connection, id, opts \\ []) do
    optional_params = %{
      :showRatings => :query,
      :currentID => :query,
      :sortBy => :query,
      :order => :query,
      :page => :query,
      :count => :query,
      :search => :query,
      :diff => :query,
      :mode => :query,
      :requirements => :query,
      :scoreStatus => :query,
      :leaderboardContext => :query,
      :type => :query,
      :modifiers => :query,
      :stars_from => :query,
      :stars_to => :query,
      :time_from => :query,
      :time_to => :query,
      :eventId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/player/#{id}/contextscores")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.ScoreResponseWithMyScoreResponseWithMetadata}
    ])
  end
end
