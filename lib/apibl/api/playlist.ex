# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.Playlist do
  @moduledoc """
  API calls for all endpoints tagged `Playlist`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_clean_one_click_playlist(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def playlist_clean_one_click_playlist(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/user/oneclickdone")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): 

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_delete_playlist(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:error, Tesla.Env.t}
  def playlist_delete_playlist(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/user/playlist")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Playlist{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_get(Tesla.Env.client, keyword()) :: {:ok, list(APIBL.Model.Playlist.t)} | {:error, Tesla.Env.t}
  def playlist_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/playlists")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.Playlist}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:count` (integer()): 
    - `:sortBy` (SortBy): 
    - `:order` (Order): 
    - `:search` (String.t): 
    - `:type` (Type): 
    - `:mode` (String.t): 
    - `:difficulty` (String.t): 
    - `:mapType` (integer()): 
    - `:allTypes` (Operation): 
    - `:mapRequirements` (Requirements): 
    - `:allRequirements` (Operation): 
    - `:songStatus` (SongStatus): 
    - `:mytype` (MyType): 
    - `:stars_from` (float()): 
    - `:stars_to` (float()): 
    - `:accrating_from` (float()): 
    - `:accrating_to` (float()): 
    - `:passrating_from` (float()): 
    - `:passrating_to` (float()): 
    - `:techrating_from` (float()): 
    - `:techrating_to` (float()): 
    - `:date_from` (integer()): 
    - `:date_to` (integer()): 
    - `:duplicate_diffs` (boolean()): 
    - `:title` (String.t): 

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_get_all(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def playlist_get_all(connection, opts \\ []) do
    optional_params = %{
      :count => :query,
      :sortBy => :query,
      :order => :query,
      :search => :query,
      :type => :query,
      :mode => :query,
      :difficulty => :query,
      :mapType => :query,
      :allTypes => :query,
      :mapRequirements => :query,
      :allRequirements => :query,
      :songStatus => :query,
      :mytype => :query,
      :stars_from => :query,
      :stars_to => :query,
      :accrating_from => :query,
      :accrating_to => :query,
      :passrating_from => :query,
      :passrating_to => :query,
      :techrating_from => :query,
      :techrating_to => :query,
      :date_from => :query,
      :date_to => :query,
      :duplicate_diffs => :query,
      :title => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/playlist/generate")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Playlist{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_get_all_playlists(Tesla.Env.client, keyword()) :: {:ok, list(APIBL.Model.Playlist.t)} | {:error, Tesla.Env.t}
  def playlist_get_all_playlists(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/user/playlists")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.Playlist}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_get_by_id(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def playlist_get_by_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/playlist/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_get_image_by_id(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def playlist_get_image_by_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/playlist/image/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_get_one_click_playlist(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def playlist_get_one_click_playlist(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/user/oneclickplaylist")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): 
    - `:shared` (boolean()): 

  ### Returns

  - `{:ok, APIBL.Model.CustomData.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_post_playlist(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.CustomData.t} | {:error, Tesla.Env.t}
  def playlist_post_playlist(connection, opts \\ []) do
    optional_params = %{
      :id => :query,
      :shared => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/user/playlist")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.CustomData}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_refresh_nominated_playlist(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def playlist_refresh_nominated_playlist(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/playlist/refreshnominated")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_refresh_qualified_playlist(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def playlist_refresh_qualified_playlist(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/playlist/refreshqualified")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_refresh_ranked_playlist(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def playlist_refresh_ranked_playlist(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/playlist/refreshranked")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:count` (integer()): 
    - `:playerId` (String.t): 
    - `:sortBy` (String.t): 
    - `:order` (Order): 
    - `:search` (String.t): 
    - `:diff` (String.t): 
    - `:type` (String.t): 
    - `:mode` (String.t): 
    - `:requirements` (Requirements): 
    - `:modifiers` (String.t): 
    - `:stars_from` (float()): 
    - `:stars_to` (float()): 
    - `:time_from` (integer()): 
    - `:time_to` (integer()): 
    - `:eventId` (integer()): 
    - `:duplicate_diffs` (boolean()): 

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_scores_playlist(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def playlist_scores_playlist(connection, opts \\ []) do
    optional_params = %{
      :count => :query,
      :playerId => :query,
      :sortBy => :query,
      :order => :query,
      :search => :query,
      :diff => :query,
      :type => :query,
      :mode => :query,
      :requirements => :query,
      :modifiers => :query,
      :stars_from => :query,
      :stars_to => :query,
      :time_from => :query,
      :time_to => :query,
      :eventId => :query,
      :duplicate_diffs => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/playlist/scores/generate")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec playlist_update_one_click_playlist(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def playlist_update_one_click_playlist(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/user/oneclickplaylist")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
