# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.CurrentUser do
  @moduledoc """
  API calls for all endpoints tagged `CurrentUser`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:playerId` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_add_friend(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_add_friend(connection, opts \\ []) do
    optional_params = %{
      :playerId => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/user/friend")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (String.t): 
    - `:reason` (String.t): 
    - `:duration` (integer()): 
    - `:bot` (boolean()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_ban(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_ban(connection, opts \\ []) do
    optional_params = %{
      :id => :query,
      :reason => :query,
      :duration => :query,
      :bot => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/user/ban")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:newLogin` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_change_login(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_change_login(connection, opts \\ []) do
    optional_params = %{
      :newLogin => :form
    }

    request =
      %{}
      |> method(:patch)
      |> url("/user/changeLogin")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:login` (String.t): 
    - `:oldPassword` (String.t): 
    - `:newPassword` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_change_password(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_change_password(connection, opts \\ []) do
    optional_params = %{
      :login => :form,
      :oldPassword => :form,
      :newPassword => :form
    }

    request =
      %{}
      |> method(:patch)
      |> url("/user/changePassword")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:login` (String.t): 
    - `:newPassword` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_change_password_0(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_change_password_0(connection, opts \\ []) do
    optional_params = %{
      :login => :form,
      :newPassword => :form
    }

    request =
      %{}
      |> method(:patch)
      |> url("/user/resetPassword")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_get_config(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_get_config(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/user/config")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APIBL.Model.UserReturn.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_get_current_user(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.UserReturn.t} | {:error, Tesla.Env.t}
  def current_user_get_current_user(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/user")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.UserReturn}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APIBL.Model.PlayerResponseWithFriends.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_get_current_user_mod(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.PlayerResponseWithFriends.t} | {:error, Tesla.Env.t}
  def current_user_get_current_user_mod(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/user/modinterface")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.PlayerResponseWithFriends}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): 
    - `:count` (integer()): 
    - `:id` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.FailedScoreResponseWithMetadata.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_get_failed_scores(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.FailedScoreResponseWithMetadata.t} | {:error, Tesla.Env.t}
  def current_user_get_failed_scores(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :count => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/user/failedscores")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.FailedScoreResponseWithMetadata}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_get_id_result(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def current_user_get_id_result(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/user/id")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:token` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.OculusUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_get_oculus_user(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.OculusUser.t} | {:error, Tesla.Env.t}
  def current_user_get_oculus_user(connection, opts \\ []) do
    optional_params = %{
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/oculususer")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.OculusUser}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_hide_op_scores(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_hide_op_scores(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/user/hideopscores")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_mark_failed_score(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_mark_failed_score(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/user/failedscore/falsepositive")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:ReturnUrl` (String.t): 
    - `:Token` (String.t): 

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_migrate_oculus_pc(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:error, Tesla.Env.t}
  def current_user_migrate_oculus_pc(connection, opts \\ []) do
    optional_params = %{
      :ReturnUrl => :query,
      :Token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/user/migrateoculuspc")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:login` (String.t): 
    - `:password` (String.t): 

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_migrate_to_steam(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:error, Tesla.Env.t}
  def current_user_migrate_to_steam(connection, opts \\ []) do
    optional_params = %{
      :login => :form,
      :password => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/user/migrate")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_post_config(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_post_config(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/user/config")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:token` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.OculusUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_post_oculus_user(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.OculusUser.t} | {:error, Tesla.Env.t}
  def current_user_post_oculus_user(connection, opts \\ []) do
    optional_params = %{
      :token => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/oculususer")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.OculusUser}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_remove_cover(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_remove_cover(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/user/cover")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_remove_failed_score(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_remove_failed_score(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/user/failedscore/remove")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:playerId` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_remove_friend(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_remove_friend(connection, opts \\ []) do
    optional_params = %{
      :playerId => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/user/friend")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): 
    - `:allow` (boolean()): 

  ### Returns

  - `{:ok, APIBL.Model.ScoreResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_retry_failed_score(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.ScoreResponse.t} | {:error, Tesla.Env.t}
  def current_user_retry_failed_score(connection, opts \\ []) do
    optional_params = %{
      :id => :query,
      :allow => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/user/failedscore/retry")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.ScoreResponse}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_unban(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_unban(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/user/unban")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_update_cover(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_update_cover(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/user/cover")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): 
    - `:country` (String.t): 
    - `:profileAppearance` (String.t): 
    - `:message` (String.t): 
    - `:hue` (float()): 
    - `:saturation` (float()): 
    - `:effectName` (String.t): 
    - `:leftSaberColor` (String.t): 
    - `:rightSaberColor` (String.t): 
    - `:starredFriends` (String.t): 
    - `:clanOrder` (String.t): 
    - `:showBots` (boolean()): 
    - `:showAllRatings` (boolean()): 
    - `:id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec current_user_update_player_all(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def current_user_update_player_all(connection, opts \\ []) do
    optional_params = %{
      :name => :query,
      :country => :query,
      :profileAppearance => :query,
      :message => :query,
      :hue => :query,
      :saturation => :query,
      :effectName => :query,
      :leftSaberColor => :query,
      :rightSaberColor => :query,
      :starredFriends => :query,
      :clanOrder => :query,
      :showBots => :query,
      :showAllRatings => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/user")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
