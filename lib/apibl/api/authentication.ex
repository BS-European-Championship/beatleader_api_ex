# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.Authentication do
  @moduledoc """
  API calls for all endpoints tagged `Authentication`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_accept(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_accept(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/oauth2/authorize")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_authorize(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_authorize(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/oauth2/authorize")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_get_antiforgery_token(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def authentication_get_antiforgery_token(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/oauthclient/antiforgery")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:clientId` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.OauthClientInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_get_oauth_client_info(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.OauthClientInfo.t} | {:error, Tesla.Env.t}
  def authentication_get_oauth_client_info(connection, opts \\ []) do
    optional_params = %{
      :clientId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/oauthclient/info")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.OauthClientInfo}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_sign_in(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_sign_in(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/signin")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:provider` (String.t): 
    - `:returnUrl` (String.t): 
    - `:oauthState` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_sign_in_0(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_sign_in_0(connection, opts \\ []) do
    optional_params = %{
      :provider => :form,
      :returnUrl => :form,
      :oauthState => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/signin")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:leaderboardId` (String.t): 
    - `:returnUrl` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_sign_in_approve(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_sign_in_approve(connection, opts \\ []) do
    optional_params = %{
      :leaderboardId => :query,
      :returnUrl => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/signin/approve")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:provider` (String.t): 
    - `:returnUrl` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_sign_in_migrate(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_sign_in_migrate(connection, opts \\ []) do
    optional_params = %{
      :provider => :form,
      :returnUrl => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/signinmigrate")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:provider` (String.t): 
    - `:returnUrl` (String.t): 
    - `:token` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_sign_in_migrate_oculus(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_sign_in_migrate_oculus(connection, opts \\ []) do
    optional_params = %{
      :provider => :form,
      :returnUrl => :form,
      :token => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/signinmigrate/oculuspc")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:oauthState` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_sign_in_oculus(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_sign_in_oculus(connection, opts \\ []) do
    optional_params = %{
      :oauthState => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/signinoculus")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:token` (String.t): 
    - `:returnUrl` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_sign_in_oculus_migrate_oculus(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_sign_in_oculus_migrate_oculus(connection, opts \\ []) do
    optional_params = %{
      :token => :form,
      :returnUrl => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/signinoculus/oculuspc")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_sign_out_current_user(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_sign_out_current_user(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/signout")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_sign_out_current_user_0(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_sign_out_current_user_0(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/signout")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:ReturnUrl` (String.t): 
    - `:Random` (integer()): 
    - `:migrateTo` (String.t): 
    - `:oauthState` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_steam_login_callback(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_steam_login_callback(connection, opts \\ []) do
    optional_params = %{
      :ReturnUrl => :query,
      :Random => :query,
      :migrateTo => :query,
      :oauthState => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/steamcallback")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec authentication_userinfo(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def authentication_userinfo(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/oauth2/identity")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
