# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.Developer do
  @moduledoc """
  API calls for all endpoints tagged `Developer`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%OAuthApp{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec developer_applications_list(Tesla.Env.client, keyword()) :: {:ok, list(APIBL.Model.OAuthApp.t)} | {:error, Tesla.Env.t}
  def developer_applications_list(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/developer/apps")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.OAuthApp}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:clientId` (String.t): 
    - `:name` (String.t): 
    - `:redirectUrls` (String.t): 
    - `:scopes` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.OAuthApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec developer_create_o_auth_app(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.OAuthApp.t} | {:error, Tesla.Env.t}
  def developer_create_o_auth_app(connection, opts \\ []) do
    optional_params = %{
      :clientId => :query,
      :name => :query,
      :redirectUrls => :query,
      :scopes => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/developer/app")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.OAuthApp}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `client_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec developer_delete_app(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def developer_delete_app(connection, client_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/developer/app/#{client_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `client_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec developer_reset_app_secret(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def developer_reset_app_secret(connection, client_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/developer/appsecretreset/#{client_id}")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `client_id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): 
    - `:redirectUrls` (String.t): 
    - `:scopes` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.OAuthApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec developer_update_o_auth_app(Tesla.Env.client, String.t, keyword()) :: {:ok, APIBL.Model.OAuthApp.t} | {:error, Tesla.Env.t}
  def developer_update_o_auth_app(connection, client_id, opts \\ []) do
    optional_params = %{
      :name => :query,
      :redirectUrls => :query,
      :scopes => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/developer/app/#{client_id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.OAuthApp}
    ])
  end
end
