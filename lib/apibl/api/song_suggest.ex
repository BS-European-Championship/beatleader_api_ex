# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.SongSuggest do
  @moduledoc """
  API calls for all endpoints tagged `SongSuggest`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:before_time` (integer()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec song_suggest_get_song_suggest(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def song_suggest_get_song_suggest(connection, opts \\ []) do
    optional_params = %{
      :before_time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/songsuggest")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:before_time` (integer()): 

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec song_suggest_get_song_suggest_last_refresh_time(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:error, Tesla.Env.t}
  def song_suggest_get_song_suggest_last_refresh_time(connection, opts \\ []) do
    optional_params = %{
      :before_time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/songsuggest/refreshTime")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:before_time` (integer()): 

  ### Returns

  - `{:ok, [%SongSuggestSong{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec song_suggest_get_song_suggest_songs(Tesla.Env.client, keyword()) :: {:ok, list(APIBL.Model.SongSuggestSong.t)} | {:error, Tesla.Env.t}
  def song_suggest_get_song_suggest_songs(connection, opts \\ []) do
    optional_params = %{
      :before_time => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/songsuggest/songs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.SongSuggestSong}
    ])
  end
end
