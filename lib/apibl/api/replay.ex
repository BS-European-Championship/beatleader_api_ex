# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.Replay do
  @moduledoc """
  API calls for all endpoints tagged `Replay`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:time` (float()): 
    - `:type` (EndType): 

  ### Returns

  - `{:ok, APIBL.Model.ScoreResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec replay_post_oculus_replay(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.ScoreResponse.t} | {:error, Tesla.Env.t}
  def replay_post_oculus_replay(connection, opts \\ []) do
    optional_params = %{
      :time => :query,
      :type => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/replayoculus")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.ScoreResponse}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:ticket` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.ScoreResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec replay_post_steam_replay(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.ScoreResponse.t} | {:error, Tesla.Env.t}
  def replay_post_steam_replay(connection, opts \\ []) do
    optional_params = %{
      :ticket => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/replay")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.ScoreResponse}
    ])
  end
end
