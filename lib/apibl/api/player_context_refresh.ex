# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.PlayerContextRefresh do
  @moduledoc """
  API calls for all endpoints tagged `PlayerContextRefresh`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:refreshRank` (boolean()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec player_context_refresh_refresh_player_all_contexts(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def player_context_refresh_refresh_player_all_contexts(connection, id, opts \\ []) do
    optional_params = %{
      :refreshRank => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/player/#{id}/refresh/allContexts")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (String.t): 
  - `context` (LeaderboardContexts): 
  - `opts` (keyword): Optional parameters
    - `:refreshRank` (boolean()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec player_context_refresh_refresh_player_context(Tesla.Env.client, String.t, APIBL.Model.LeaderboardContexts.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def player_context_refresh_refresh_player_context(connection, id, context, opts \\ []) do
    optional_params = %{
      :refreshRank => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/player/#{id}/refresh/#{context}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec player_context_refresh_refresh_players_all_context(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def player_context_refresh_refresh_players_all_context(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/players/refresh/allContexts")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `context` (LeaderboardContexts): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec player_context_refresh_refresh_players_context(Tesla.Env.client, APIBL.Model.LeaderboardContexts.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def player_context_refresh_refresh_players_context(connection, context, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/players/refresh/#{context}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `context` (LeaderboardContexts): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec player_context_refresh_refresh_players_stats(Tesla.Env.client, APIBL.Model.LeaderboardContexts.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def player_context_refresh_refresh_players_stats(connection, context, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/players/stats/refresh/#{context}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec player_context_refresh_refresh_players_stats_all_contexts(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def player_context_refresh_refresh_players_stats_all_contexts(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/players/stats/refresh/allContexts")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `context` (LeaderboardContexts): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec player_context_refresh_refresh_ranks(Tesla.Env.client, APIBL.Model.LeaderboardContexts.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def player_context_refresh_refresh_ranks(connection, context, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/players/rankrefresh/#{context}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec player_context_refresh_refresh_ranks_all_contexts(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def player_context_refresh_refresh_ranks_all_contexts(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/players/rankrefresh/allContexts")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
