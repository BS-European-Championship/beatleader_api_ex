# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.Clan do
  @moduledoc """
  API calls for all endpoints tagged `Clan`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_accept_request(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def clan_accept_request(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/clan/accept")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:tag` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_allow_tag(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def clan_allow_tag(connection, opts \\ []) do
    optional_params = %{
      :tag => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/clan/reserve")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:player` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_cancelinvite_to_clan(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def clan_cancelinvite_to_clan(connection, opts \\ []) do
    optional_params = %{
      :player => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/clan/cancelinvite")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): 
    - `:tag` (String.t): 
    - `:color` (String.t): 
    - `:description` (String.t): 
    - `:bio` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.Clan.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_create_clan(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.Clan.t} | {:error, Tesla.Env.t}
  def clan_create_clan(connection, opts \\ []) do
    optional_params = %{
      :name => :query,
      :tag => :query,
      :color => :query,
      :description => :query,
      :bio => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/clan/create")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.Clan}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_delete_clan(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def clan_delete_clan(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/clan")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): 
    - `:count` (integer()): 
    - `:sort` (String.t): 
    - `:order` (Order): 
    - `:search` (String.t): 
    - `:type` (String.t): 
    - `:sortBy` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.ClanResponseWithMetadata.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_get_all(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.ClanResponseWithMetadata.t} | {:error, Tesla.Env.t}
  def clan_get_all(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :count => :query,
      :sort => :query,
      :order => :query,
      :search => :query,
      :type => :query,
      :sortBy => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/clans")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.ClanResponseWithMetadata}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `tag` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): 
    - `:count` (integer()): 
    - `:sort` (String.t): 
    - `:order` (Order): 
    - `:search` (String.t): 
    - `:capturedLeaderboards` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.PlayerResponseClanResponseWithMetadataAndContainer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_get_clan(Tesla.Env.client, String.t, keyword()) :: {:ok, APIBL.Model.PlayerResponseClanResponseWithMetadataAndContainer.t} | {:error, Tesla.Env.t}
  def clan_get_clan(connection, tag, opts \\ []) do
    optional_params = %{
      :page => :query,
      :count => :query,
      :sort => :query,
      :order => :query,
      :search => :query,
      :capturedLeaderboards => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/clan/#{tag}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.PlayerResponseClanResponseWithMetadataAndContainer}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:player` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_invite_to_clan(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def clan_invite_to_clan(connection, opts \\ []) do
    optional_params = %{
      :player => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/clan/invite")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:player` (String.t): 
    - `:id` (integer()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_kick_player(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def clan_kick_player(connection, opts \\ []) do
    optional_params = %{
      :player => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/clan/kickplayer")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_leave_clan(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def clan_leave_clan(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/clan/leave")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): 
    - `:ban` (boolean()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_reject_request(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def clan_reject_request(connection, opts \\ []) do
    optional_params = %{
      :id => :query,
      :ban => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/clan/reject")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:tag` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_reserve_tag(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def clan_reserve_tag(connection, opts \\ []) do
    optional_params = %{
      :tag => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/clan/reserve")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_unban_clan(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def clan_unban_clan(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/clan/unban")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): 
    - `:name` (String.t): 
    - `:color` (String.t): 
    - `:description` (String.t): 
    - `:bio` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clan_update_clan(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def clan_update_clan(connection, opts \\ []) do
    optional_params = %{
      :id => :query,
      :name => :query,
      :color => :query,
      :description => :query,
      :bio => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/clan")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
