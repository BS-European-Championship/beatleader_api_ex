# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.Achievements do
  @moduledoc """
  API calls for all endpoints tagged `Achievements`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%AchievementDescription{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec achievements_all_achievements(Tesla.Env.client, keyword()) :: {:ok, list(APIBL.Model.AchievementDescription.t)} | {:error, Tesla.Env.t}
  def achievements_all_achievements(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/achievements")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.AchievementDescription}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APIBL.Model.Achievement.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec achievements_assign_achievement(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.Achievement.t} | {:error, Tesla.Env.t}
  def achievements_assign_achievement(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/survey/achievement")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.Achievement}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): 
    - `:description` (String.t): 
    - `:link` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.AchievementDescription.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec achievements_create_achievement(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.AchievementDescription.t} | {:error, Tesla.Env.t}
  def achievements_create_achievement(connection, opts \\ []) do
    optional_params = %{
      :name => :query,
      :description => :query,
      :link => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/achievement")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.AchievementDescription}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): 
    - `:image` (String.t): 
    - `:smallImage` (String.t): 
    - `:level` (integer()): 
    - `:description` (String.t): 
    - `:detailedDescription` (String.t): 
    - `:color` (String.t): 
    - `:link` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.AchievementLevel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec achievements_create_achievement_level(Tesla.Env.client, integer(), keyword()) :: {:ok, APIBL.Model.AchievementLevel.t} | {:error, Tesla.Env.t}
  def achievements_create_achievement_level(connection, id, opts \\ []) do
    optional_params = %{
      :name => :query,
      :image => :query,
      :smallImage => :query,
      :level => :query,
      :description => :query,
      :detailedDescription => :query,
      :color => :query,
      :link => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/achievement/#{id}/level")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.AchievementLevel}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Achievement{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec achievements_get_achievements(Tesla.Env.client, String.t, keyword()) :: {:ok, list(APIBL.Model.Achievement.t)} | {:error, Tesla.Env.t}
  def achievements_get_achievements(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/player/#{id}/achievements")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.Achievement}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:achievemntId` (integer()): 
    - `:level` (integer()): 

  ### Returns

  - `{:ok, APIBL.Model.Achievement.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec achievements_grant_player_achievement(Tesla.Env.client, String.t, keyword()) :: {:ok, APIBL.Model.Achievement.t} | {:error, Tesla.Env.t}
  def achievements_grant_player_achievement(connection, id, opts \\ []) do
    optional_params = %{
      :achievemntId => :query,
      :level => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/player/#{id}/achievement")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.Achievement}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:playerId` (String.t): 
    - `:key` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec achievements_mark_survey_filled(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def achievements_mark_survey_filled(connection, opts \\ []) do
    optional_params = %{
      :playerId => :query,
      :key => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/survey/filled")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end
end
