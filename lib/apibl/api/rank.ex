# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.Rank do
  @moduledoc """
  API calls for all endpoints tagged `Rank`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters
    - `:vote` (MapQuality): 

  ### Returns

  - `{:ok, [%QualificationVote{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_add_vote(Tesla.Env.client, integer(), keyword()) :: {:ok, list(APIBL.Model.QualificationVote.t)} | {:error, Tesla.Env.t}
  def rank_add_vote(connection, id, opts \\ []) do
    optional_params = %{
      :vote => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/qualification/vote/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.QualificationVote}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_delete_comment(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def rank_delete_comment(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/qualification/comment/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_delete_criteriaomment(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def rank_delete_criteriaomment(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/qualification/criteria/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `diff` (String.t): 
  - `mode` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:player` (String.t): 

  ### Returns

  - `{:ok, APIBL.Model.VoteStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_get_vote_status(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, APIBL.Model.VoteStatus.t} | {:error, Tesla.Env.t}
  def rank_get_vote_status(connection, hash, diff, mode, opts \\ []) do
    optional_params = %{
      :player => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/votestatus/#{hash}/#{diff}/#{mode}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.VoteStatus}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `player_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_grant_rt_core(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def rank_grant_rt_core(connection, player_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/grantRTCore/#{player_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `player_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_grant_rt_junior(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def rank_grant_rt_junior(connection, player_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/grantRTJunior/#{player_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:scoreId` (integer()): 
    - `:value` (float()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_make_vote_feedback(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def rank_make_vote_feedback(connection, opts \\ []) do
    optional_params = %{
      :scoreId => :query,
      :value => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/votefeedback")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `diff` (String.t): 
  - `mode` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_nominate_map(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def rank_nominate_map(connection, hash, diff, mode, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/nominate/#{hash}/#{diff}/#{mode}")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APIBL.Model.QualificationCommentary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_post_comment(Tesla.Env.client, integer(), keyword()) :: {:ok, APIBL.Model.QualificationCommentary.t} | {:error, Tesla.Env.t}
  def rank_post_comment(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/qualification/comment/#{id}")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.QualificationCommentary}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APIBL.Model.CriteriaCommentary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_post_criteria_comment(Tesla.Env.client, integer(), keyword()) :: {:ok, APIBL.Model.CriteriaCommentary.t} | {:error, Tesla.Env.t}
  def rank_post_criteria_comment(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/qualification/criteria/#{id}")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.CriteriaCommentary}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APIBL.Model.PrevQualification.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_prev_qualification_time(Tesla.Env.client, String.t, keyword()) :: {:ok, APIBL.Model.PrevQualification.t} | {:error, Tesla.Env.t}
  def rank_prev_qualification_time(connection, hash, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/prevQualTime/#{hash}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.PrevQualification}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `player_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_remove_rt_core(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def rank_remove_rt_core(connection, player_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/removeRTCore/#{player_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `player_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_remove_rt_junior(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def rank_remove_rt_junior(connection, player_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/removeRTJunior/#{player_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `diff` (String.t): 
  - `mode` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:rankability` (float()): 
    - `:accRating` (float()): 
    - `:passRating` (float()): 
    - `:techRating` (float()): 
    - `:type` (integer()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_set_star_value(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def rank_set_star_value(connection, hash, diff, mode, opts \\ []) do
    optional_params = %{
      :rankability => :query,
      :accRating => :query,
      :passRating => :query,
      :techRating => :query,
      :type => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/rank/#{hash}/#{diff}/#{mode}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APIBL.Model.QualificationCommentary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_update_comment(Tesla.Env.client, integer(), keyword()) :: {:ok, APIBL.Model.QualificationCommentary.t} | {:error, Tesla.Env.t}
  def rank_update_comment(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/qualification/comment/#{id}")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.QualificationCommentary}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APIBL.Model.CriteriaCommentary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_update_criteria_comment(Tesla.Env.client, integer(), keyword()) :: {:ok, APIBL.Model.CriteriaCommentary.t} | {:error, Tesla.Env.t}
  def rank_update_criteria_comment(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/qualification/criteria/#{id}")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.CriteriaCommentary}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `diff` (String.t): 
  - `mode` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:newStatus` (DifficultyStatus): 
    - `:accRating` (float()): 
    - `:passRating` (float()): 
    - `:techRating` (float()): 
    - `:type` (integer()): 
    - `:criteriaCheck` (integer()): 
    - `:criteriaCommentary` (String.t): 
    - `:modifiers` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_update_map_qualification(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def rank_update_map_qualification(connection, hash, diff, mode, opts \\ []) do
    optional_params = %{
      :newStatus => :query,
      :accRating => :query,
      :passRating => :query,
      :techRating => :query,
      :type => :query,
      :criteriaCheck => :query,
      :criteriaCommentary => :query,
      :modifiers => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/qualification/#{hash}/#{diff}/#{mode}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `diff` (String.t): 
  - `mode` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:rankability` (float()): 
    - `:stars` (String.t): 
    - `:type` (integer()): 

  ### Returns

  - `{:ok, APIBL.Model.VoteStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_vote(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, APIBL.Model.VoteStatus.t} | {:error, Tesla.Env.t}
  def rank_vote(connection, hash, diff, mode, opts \\ []) do
    optional_params = %{
      :rankability => :query,
      :stars => :query,
      :type => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/vote/#{hash}/#{diff}/#{mode}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.VoteStatus}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `diff` (String.t): 
  - `mode` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:ticket` (String.t): 
    - `:rankability` (float()): 
    - `:stars` (String.t): 
    - `:type` (integer()): 

  ### Returns

  - `{:ok, APIBL.Model.VoteStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rank_vote_steam(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, APIBL.Model.VoteStatus.t} | {:error, Tesla.Env.t}
  def rank_vote_steam(connection, hash, diff, mode, opts \\ []) do
    optional_params = %{
      :ticket => :query,
      :rankability => :query,
      :stars => :query,
      :type => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/vote/steam/#{hash}/#{diff}/#{mode}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.VoteStatus}
    ])
  end
end
