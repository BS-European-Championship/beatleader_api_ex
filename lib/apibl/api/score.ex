# NOTE: This file is auto generated by OpenAPI Generator 7.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APIBL.Api.Score do
  @moduledoc """
  API calls for all endpoints tagged `Score`.
  """

  alias APIBL.Connection
  import APIBL.RequestBuilder

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APIBL.Model.ScoreStatistic.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_calculate_statistic(Tesla.Env.client, String.t, keyword()) :: {:ok, APIBL.Model.ScoreStatistic.t} | {:error, Tesla.Env.t}
  def score_calculate_statistic(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/score/calculatestatistic/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.ScoreStatistic}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_delete_score(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def score_delete_score(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/score/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_fwsfdfsdfsdf(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def score_fwsfdfsdfsdf(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/fwsfdfsdfsdf")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `diff` (String.t): 
  - `mode` (String.t): 
  - `context` (String.t): 
  - `scope` (String.t): 
  - `method` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:player` (String.t): 
    - `:page` (integer()): 
    - `:count` (integer()): 

  ### Returns

  - `{:ok, APIBL.Model.ScoreResponseResponseWithMetadataAndSelection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_get_by_hash3(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, APIBL.Model.ScoreResponseResponseWithMetadataAndSelection.t} | {:error, Tesla.Env.t}
  def score_get_by_hash3(connection, hash, diff, mode, context, scope, method, opts \\ []) do
    optional_params = %{
      :player => :query,
      :page => :query,
      :count => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v3/scores/#{hash}/#{diff}/#{mode}/#{context}/#{scope}/#{method}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.ScoreResponseResponseWithMetadataAndSelection}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `diff` (String.t): 
  - `mode` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): 
    - `:count` (integer()): 

  ### Returns

  - `{:ok, APIBL.Model.SaverScoreResponseResponseWithMetadata.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_get_by_hash4(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, APIBL.Model.SaverScoreResponseResponseWithMetadata.t} | {:error, Tesla.Env.t}
  def score_get_by_hash4(connection, hash, diff, mode, opts \\ []) do
    optional_params = %{
      :page => :query,
      :count => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v4/scores/#{hash}/#{diff}/#{mode}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.SaverScoreResponseResponseWithMetadata}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `hash` (String.t): 
  - `diff` (String.t): 
  - `mode` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): 
    - `:count` (integer()): 

  ### Returns

  - `{:ok, APIBL.Model.SaverScoreResponseSaverContainerResponseResponseWithMetadataAndContainer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_get_by_hash5(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, APIBL.Model.SaverScoreResponseSaverContainerResponseResponseWithMetadataAndContainer.t} | {:error, Tesla.Env.t}
  def score_get_by_hash5(connection, hash, diff, mode, opts \\ []) do
    optional_params = %{
      :page => :query,
      :count => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v5/scores/#{hash}/#{diff}/#{mode}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.SaverScoreResponseSaverContainerResponseResponseWithMetadataAndContainer}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `player_id` (String.t): 
  - `hash` (String.t): 
  - `diff` (String.t): 
  - `mode` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:leaderboardContext` (LeaderboardContexts): 

  ### Returns

  - `{:ok, APIBL.Model.Score.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_get_player(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, APIBL.Model.Score.t} | {:error, Tesla.Env.t}
  def score_get_player(connection, player_id, hash, diff, mode, opts \\ []) do
    optional_params = %{
      :leaderboardContext => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/score/#{player_id}/#{hash}/#{diff}/#{mode}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.Score}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APIBL.Model.Score.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_get_random_score(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.Score.t} | {:error, Tesla.Env.t}
  def score_get_random_score(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/score/random")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.Score}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:count` (integer()): 
    - `:page` (integer()): 
    - `:date_from` (integer()): 
    - `:date_to` (integer()): 

  ### Returns

  - `{:ok, APIBL.Model.StringResponseWithMetadata.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_get_replays(Tesla.Env.client, keyword()) :: {:ok, APIBL.Model.StringResponseWithMetadata.t} | {:error, Tesla.Env.t}
  def score_get_replays(connection, opts \\ []) do
    optional_params = %{
      :count => :query,
      :page => :query,
      :date_from => :query,
      :date_to => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/replays")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.StringResponseWithMetadata}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters
    - `:fallbackToRedirect` (boolean()): 

  ### Returns

  - `{:ok, APIBL.Model.ScoreResponseWithDifficulty.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_get_score(Tesla.Env.client, integer(), keyword()) :: {:ok, APIBL.Model.ScoreResponseWithDifficulty.t} | {:error, Tesla.Env.t}
  def score_get_score(connection, id, opts \\ []) do
    optional_params = %{
      :fallbackToRedirect => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/score/#{id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.ScoreResponseWithDifficulty}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_get_statistic(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def score_get_statistic(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/score/statistic/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_get_stats(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def score_get_stats(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/scorestats")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (APIBL.Connection): Connection to server
  - `id` (integer()): 
  - `opts` (keyword): Optional parameters
    - `:pin` (boolean()): 
    - `:description` (String.t): 
    - `:link` (String.t): 
    - `:priority` (integer()): 
    - `:leaderboardContext` (LeaderboardContexts): 

  ### Returns

  - `{:ok, APIBL.Model.ScoreMetadata.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec score_pin_score(Tesla.Env.client, integer(), keyword()) :: {:ok, APIBL.Model.ScoreMetadata.t} | {:error, Tesla.Env.t}
  def score_pin_score(connection, id, opts \\ []) do
    optional_params = %{
      :pin => :query,
      :description => :query,
      :link => :query,
      :priority => :query,
      :leaderboardContext => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/score/#{id}/pin")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APIBL.Model.ScoreMetadata}
    ])
  end
end
